var methods = MethodDeclaration.all.select(m | m.name == methodDeclaration);
var currentClass = ClassDeclaration.all.select(c | c.name == classDeclaration).first();

var candidates = currentClass.getAllParentsFromClass().collect( c | c.bodyDeclarations.select(m | m.isTypeOf(MethodDeclaration) and m.name == methodDeclaration)).flatten();

var measurementToModifiedMethod = Measurement.all.select(m | m.measurand.isDefined() and m.measurand == candidates.first());

return measurementToModifiedMethod.collect(m | m.getMethodDeclarationImpacted().qualifiedName());


@cached
operation Measurement getMethodDeclarationImpacted() : MethodDeclaration {
    var rs = self.inbound;
    if (rs.isDefined() and rs.from.isDefined() and not rs.from.isEmpty() and rs.from.at(0).isKindOf(Measurement)) {
        return rs.from.at(0).getMethodDeclarationImpacted();
    } else {
        return self.measurand;
    }
}

@cached
operation ClassDeclaration getAllParentsFromClass() : Sequence {
    if (self.superClass.isDefined() and self.superClass.type.isTypeOf(ClassDeclaration)) {
        return Sequence{self, self.superClass.type.getAllParentsFromClass()}.flatten();
    } else {
        return Sequence{self};
    }
}

@cached
operation MethodDeclaration qualifiedName() : String {
    return self.eContainer.package.name +"."+self.eContainer.name+"$"+self.name;
}